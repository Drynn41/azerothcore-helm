apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.worldserver.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      initContainers:
        - name: "{{ .Chart.Name }}-{{ .Chart.AppVersion }}-data-init"
          imagePullPolicy: {{ .Values.worldserver.data_init.pullPolicy }}
          image: "{{ .Values.worldserver.data_init.image }}"           # Assure-toi d'utiliser la bonne image Docker
          volumeMounts:
            - mountPath: /azerothcore/env/dist/data
              name: worldserver-data
      containers:
        - name: "{{ .Chart.Name }}-{{ .Chart.AppVersion }}-server"
          imagePullPolicy: {{ .Values.worldserver.pullPolicy }}  # La politique de pull de l'image
          image: {{ .Values.worldserver.image }}                      # L'image du service {{ .Chart.Name }}
          stdin: true
          tty: true
          envFrom:
            - configMapRef:
                name: "{{ .Chart.Name }}-config"
          ports:
            - containerPort: {{ .Values.worldserver.service.worldserver.port }}
            - containerPort: {{ .Values.worldserver.service.soap.port }}
          volumeMounts:
            - mountPath: /azerothcore/env/dist/data
              name: worldserver-data
{{ toYaml .Values.worldserver.resources | indent 10 }}  # Indentation de 12 espaces pour la section resources
      restartPolicy: Always

      volumes:  # ❗️ La section volumes doit être DANS spec.template.spec
        - name: worldserver-data
          persistentVolumeClaim:
            claimName: {{ .Values.worldserver.pvc.pvc_name }}  # PVC du client, à adapter si nécessaire

